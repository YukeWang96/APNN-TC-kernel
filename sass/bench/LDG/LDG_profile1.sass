<params>
output, 8
param_A, 8
</params>

<regs>
0-16 ~ output0, output1, tid, offset, target, start, end, iter
17-20 : A<0-3>
21: loadA
22-23: trackA<0-1>
24: unit128
</regs>

--:-:1:-:5    S2R tid, SR_TID.X;
--:-:-:-:2    MOV output0, output[0];
--:-:-:-:5    MOV output1, output[1];
02:-:-:-:6    SHF.L offset, tid, 2, RZ;
--:-:-:-:5    MOV iter, RZ;


--:-:-:-:2     MOV loadA, RZ;
--:-:-:-:2     MOV unit128, 4;
--:-:-:-:8     IMAD.WIDE trackA0, loadA, unit128, param_A[0];

--:-:-:-:1    CS2R start, SR_CLOCKLO;



LOOP:
<code>
out = []
out.append('--:-:-:-:1    IADD3 iter, iter, 1, RZ;')
for i in range(1):
  if i == 64:
    out.append(f'--:-:-:-:1    ISETP.LT.AND P0, PT, iter, 128, PT;')
  out.append(f'--:3:1:-:8     LDG.E.128.CONSTANT.GPU A0, [trackA0];')
out.append('--:-:-:-:2  @P0  BRA LOOP;')
out_ = '\n'.join(out) + '\n'
</code>

--:-:-:-:5    CS2R end, SR_CLOCKLO;
--:-:-:-:5    IADD3 end, end, -start, RZ;
--:-:-:-:2    STG.E.GPU [output0], end;




--:-:-:-:2    EXIT;
