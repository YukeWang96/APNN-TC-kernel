<params>
output, 8
input, 8 # parameter_name, size
</params>

<regs>
0-3 : input_0, input_1, output_0, output_1
4, 5 : tmp, size_int
6-7: start, end
</regs>

--:-:-:-:2     MOV input_0, input[0];
--:-:-:-:2     MOV input_1, input[1];
--:-:-:-:2     MOV output_0, output[0];
--:-:-:-:2     MOV output_1, output[1];





<code>
out = []
for i in range(32):
  out.append(f'--:-:1:-:2     LDG.E tmp, [input_0];')
out_ = '\n'.join(out) + '\n'
</code>



--:-:-:-:1    CS2R start, SR_CLOCKLO;
<code>
out = []
for i in range(256):
  out.append(f'02:-:-:-:2     STG.E [output_0], tmp;')
out_ = '\n'.join(out) + '\n'
</code>
--:-:-:-:5    CS2R end, SR_CLOCKLO;
--:-:-:-:5    IADD3 end, end, -start, RZ;
--:-:-:-:2    STG.E.GPU [output_0], end;

# --:-:-:-:5     MOV size_int, 4;

# --:-:-:-:8     IMAD.WIDE input_0, size_int, 1, input_0;
# --:-:1:-:2     LDG.E tmp, [input_0];
# --:-:-:-:8     IMAD.WIDE output_0, size_int, 1, output_0;
# 02:-:-:-:2     STG.E [output_0], tmp;

--:-:-:-:2     EXIT;

